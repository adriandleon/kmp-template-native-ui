name: Android App Deploy

# =============================================================================
# CONFIGURABLE VARIABLES - Customize these for your project
# =============================================================================
env:
  # Project Configuration
  PROJECT_NAME: Template
  ANDROID_APP_MODULE: composeApp
  SHARED_MODULE: shared

  # Android Configuration
  ANDROID_PACKAGE_NAME: com.adriandeleon.template
  ANDROID_GOOGLE_SERVICES_FILE: google-services.json
  ANDROID_NAMESPACE: com.adriandeleon.template

  # Build Configuration
  JAVA_VERSION: '17'
  GRADLE_WRAPPER: ./gradlew
  GRADLE_PATH: composeApp/build.gradle.kts

  # APK Configuration
  APK_DEBUG_NAME: composeApp-debug.apk
  APK_DEBUG_PATH: composeApp/build/outputs/apk/debug
  APK_TEST_NAME: composeApp-debug-androidTest.apk
  APK_TEST_PATH: composeApp/build/outputs/apk/androidTest/debug
  BUNDLE_RELEASE_NAME: composeApp-release.aab
  BUNDLE_RELEASE_PATH: composeApp/build/outputs/bundle/release

  # Firebase Test Lab Configuration
  FIREBASE_DEVICE_MODEL: tokay
  FIREBASE_DEVICE_VERSION: '35'
  FIREBASE_LOCALE: es
  FIREBASE_ORIENTATION: portrait
  FIREBASE_TIMEOUT: 15m

  # Play Store Configuration
  PLAY_STORE_TRACK: internal
  RELEASE_NOTES_DIR: composeApp/release/whatsNew

  # Environment Variables (from secrets)
  SUPABASE_URL_DEV_AND: ${{ secrets.SUPABASE_URL_PROD }}
  SUPABASE_URL_DEV_IOS: ${{ secrets.SUPABASE_URL_PROD }}
  SUPABASE_KEY_DEV: ${{ secrets.SUPABASE_KEY_PROD }}
  SUPABASE_URL_PROD: ${{ secrets.SUPABASE_URL_PROD }}
  SUPABASE_KEY_PROD: ${{ secrets.SUPABASE_KEY_PROD }}
  CONFIGCAT_AND_TEST_KEY: ${{ secrets.CONFIGCAT_AND_TEST_KEY }}
  CONFIGCAT_AND_LIVE_KEY: ${{ secrets.CONFIGCAT_AND_LIVE_KEY }}
  CONFIGCAT_IOS_TEST_KEY: ${{ secrets.CONFIGCAT_IOS_TEST_KEY }}
  CONFIGCAT_IOS_LIVE_KEY: ${{ secrets.CONFIGCAT_IOS_LIVE_KEY }}
  GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}

on:
  push:
    branches: [main]

jobs:
  generate-apk:
    name: Generate APK
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Gradle Cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: ${{ runner.os }}-gradle-

    - name: Set Up SDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: temurin
        cache: gradle

    - name: Load Google Service JSON file
      run: echo $GOOGLE_SERVICES_JSON | base64 -di > ${{ env.ANDROID_APP_MODULE }}/${{ env.ANDROID_GOOGLE_SERVICES_FILE }}

    - name: Assemble App Debug APK
      run: ${{ env.GRADLE_WRAPPER }} ${{ env.ANDROID_APP_MODULE }}:assembleDebug

    - name: Upload App APK
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.APK_DEBUG_NAME }}
        path: ${{ env.APK_DEBUG_PATH }}/${{ env.APK_DEBUG_NAME }}

    - name: Assemble App Instrumentation Tests
      run: ${{ env.GRADLE_WRAPPER }} ${{ env.ANDROID_APP_MODULE }}:assembleDebugAndroidTest

    - name: Upload App Tests APK
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.APK_TEST_NAME }}
        path: ${{ env.APK_TEST_PATH }}/${{ env.APK_TEST_NAME }}

  firebase:
    name: Run UI tests with Firebase Test Lab
    needs: generate-apk
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Gradle Cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: ${{ runner.os }}-gradle-

    - name: Download App APK
      uses: actions/download-artifact@v5
      with:
        name: ${{ env.APK_DEBUG_NAME }}
        path: ./artifacts

    - name: Download App Tests APK
      uses: actions/download-artifact@v5
      with:
        name: ${{ env.APK_TEST_NAME }}
        path: ./artifacts

    - name: Authenticate with Google Cloud
      uses: google-github-actions/auth@v2
      with:
        project_id: ${{ secrets.GOOGLE_PROJECT_ID }}
        credentials_json: ${{ secrets.GOOGLE_SERVICE_ACCOUNT }}

    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v3

    - name: Run instrumentations tests in Firebase Test Lab
      run: gcloud firebase test android run --type instrumentation --app ./artifacts/${{ env.APK_DEBUG_NAME }} --test ./artifacts/${{ env.APK_TEST_NAME }} --device model=${{ env.FIREBASE_DEVICE_MODEL }},version=${{ env.FIREBASE_DEVICE_VERSION }},locale=${{ env.FIREBASE_LOCALE }},orientation=${{ env.FIREBASE_ORIENTATION }} --timeout ${{ env.FIREBASE_TIMEOUT }}

  coverage_report:
    name: Update Code Coverage Report
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Gradle Cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: ${{ runner.os }}-gradle-

    - name: Set Up SDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: ${{ env.JAVA_VERSION }}
        cache: gradle

    - name: Load Google Service JSON file
      run: echo $GOOGLE_SERVICES_JSON | base64 -di > ${{ env.ANDROID_APP_MODULE }}/${{ env.ANDROID_GOOGLE_SERVICES_FILE }}

    - name: Check coverage metrics
      run: ${{ env.GRADLE_WRAPPER }} koverVerify koverXmlReport

    - name: Upload coverage reports
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ${{ env.SHARED_MODULE }}/build/reports/kover/report.xml
        disable_search: true
        fail_ci_if_error: false

  distribute:
    name: Distribute app bundle to Play Store
    needs: firebase
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Gradle Cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: ${{ runner.os }}-gradle-

    - name: Set Up SDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: ${{ env.JAVA_VERSION }}
        cache: gradle

    - name: Load Google Service JSON file
      run: echo $GOOGLE_SERVICES_JSON | base64 -di > ${{ env.ANDROID_APP_MODULE }}/${{ env.ANDROID_GOOGLE_SERVICES_FILE }}

    - name: Bump version number
      uses: chkfung/android-version-actions@v1.2.3
      with:
        gradlePath: ${{ env.GRADLE_PATH }}
        versionCode: ${{ github.run_number }}
        versionName: 1.0.${{ github.run_number }}

    - name: Assemble Release Bundle
      run: ${{ env.GRADLE_WRAPPER }} ${{ env.ANDROID_APP_MODULE }}:bundleRelease -Pbuildkonfig.flavor=release

    - name: Sign Release
      uses: r0adkll/sign-android-release@v1
      with:
        releaseDirectory: ${{ env.BUNDLE_RELEASE_PATH }}
        signingKeyBase64: ${{ secrets.ANDROID_KEYSTORE }}
        keyStorePassword: ${{ secrets.KEYSTORE_PASSWORD }}
        alias: ${{ secrets.ANDROID_KEY_ALIAS }}
        keyPassword: ${{ secrets.ANDROID_KEY_PASSWORD }}

    - name: Deploy to internal track
      uses: r0adkll/upload-google-play@v1.1.3
      with:
        serviceAccountJsonPlainText: ${{ secrets.GOOGLE_SERVICE_ACCOUNT }}
        packageName: ${{ env.ANDROID_PACKAGE_NAME }}
        releaseFiles: ${{ env.BUNDLE_RELEASE_PATH }}/${{ env.BUNDLE_RELEASE_NAME }}
        track: ${{ env.PLAY_STORE_TRACK }}
        whatsNewDirectory: ${{ env.RELEASE_NOTES_DIR }}
