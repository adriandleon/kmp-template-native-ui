name: iOS App Deploy

# =============================================================================
# CONFIGURABLE VARIABLES - Customize these for your project
# =============================================================================
env:
  # Project Configuration
  PROJECT_NAME: Template
  ANDROID_APP_MODULE: composeApp
  IOS_APP_MODULE: iosApp
  SHARED_MODULE: shared

  # Android Configuration
  ANDROID_PACKAGE_NAME: com.adriandeleon.template
  ANDROID_GOOGLE_SERVICES_FILE: google-services.json

  # iOS Configuration
  IOS_BUNDLE_ID: com.adriandeleon.Template
  IOS_GOOGLE_SERVICES_FILE: GoogleService-Info.plist
  IOS_APP_FOLDER: Template
  IOS_TARGET_NAME: Template

  # Build Configuration
  JAVA_VERSION: '17'
  RUBY_VERSION: '3.3'
  GRADLE_WRAPPER: ./gradlew
  XCODE_VERSION: latest-stable

  # Code Signing Configuration
  MATCH_TYPE: appstore
  MATCH_GIT_URL: https://github.com/japsystem/apple-certificates.git
  MATCH_READONLY: 'true'

  # TestFlight Configuration
  PILOT_GROUPS: Internals

  # Environment Variables (from secrets)
  SUPABASE_URL_DEV_AND: ${{ secrets.SUPABASE_URL_PROD }}
  SUPABASE_URL_DEV_IOS: ${{ secrets.SUPABASE_URL_PROD }}
  SUPABASE_KEY_DEV: ${{ secrets.SUPABASE_KEY_PROD }}
  SUPABASE_URL_PROD: ${{ secrets.SUPABASE_URL_PROD }}
  SUPABASE_KEY_PROD: ${{ secrets.SUPABASE_KEY_PROD }}
  CONFIGCAT_AND_TEST_KEY: ${{ secrets.CONFIGCAT_AND_TEST_KEY }}
  CONFIGCAT_AND_LIVE_KEY: ${{ secrets.CONFIGCAT_AND_LIVE_KEY }}
  CONFIGCAT_IOS_TEST_KEY: ${{ secrets.CONFIGCAT_IOS_TEST_KEY }}
  CONFIGCAT_IOS_LIVE_KEY: ${{ secrets.CONFIGCAT_IOS_LIVE_KEY }}
  GOOGLE_SERVICES_PLIST: ${{ secrets.GOOGLE_SERVICES_PLIST }}
  APP_STORE_CONNECT_API_KEY_KEY_ID: ${{ secrets.APPSTORE_KEY_ID }}
  APP_STORE_CONNECT_API_KEY_ISSUER_ID: ${{ secrets.APPSTORE_ISSUER_ID }}
  APP_STORE_CONNECT_API_KEY_KEY: ${{ secrets.APPSTORE_PRIVATE_KEY }}
  APP_STORE_CONNECT_API_KEY_IS_KEY_CONTENT_BASE64: true
  MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}
  MATCH_PASSWORD: ${{ secrets.MATCH_PASSPHRASE }}

on:
  push:
    branches: [main]

jobs:
  ios_tests:
    name: iOS Unit Tests
    runs-on: macos-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Gradle Cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: ${{ runner.os }}-gradle-

    - name: SPM Cache
      uses: actions/cache@v4
      with:
        path: /Users/runner/Library/Developer/Xcode/DerivedData/**/SourcePackages/checkouts
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-

    - name: Set Xcode version
      uses: maxim-lobanov/setup-xcode@v1.6.0
      with:
        xcode-version: ${{ env.XCODE_VERSION }}

    - name: Set Up SDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: ${{ env.JAVA_VERSION }}
        cache: gradle

    - name: Load Google Service PLIST file
      run: echo $GOOGLE_SERVICES_PLIST | base64 -d > ${{ env.IOS_APP_MODULE }}/${{ env.IOS_APP_FOLDER }}/${{ env.IOS_GOOGLE_SERVICES_FILE }}

    - name: Set Up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
        bundler-cache: true
        working-directory: ${{ env.IOS_APP_MODULE }}

    - name: iOS Unit Tests (bundle exec)
      run: bundle exec fastlane tests

#    - name: iOS Unit Tests (Fastlane)
#      uses: maierj/fastlane-action@v3.1.0
#      with:
#        lane: tests
#        subdirectory: ${{ env.IOS_APP_MODULE }}
#
#    - name: iOS Release to TestFlight
#      uses: maierj/fastlane-action@v3.1.0
#      with:
#        lane: release
#        subdirectory: ${{ env.IOS_APP_MODULE }}

#    - name: Gather code coverage
#      run: xcrun llvm-cov export -format="lcov" .build/debug/{YOUR_PACKAGE_NAME}PackageTests.xctest/Contents/MacOS/{YOUR_PACKAGE_NAME}PackageTests -instr-profile .build/debug/codecov/default.profdata > coverage_report.lcov
#
#    - name: Upload coverage to Codecov
#      uses: codecov/codecov-action@v5
#      with:
#        token: ${{ secrets.CODECOV_TOKEN }}
#        fail_ci_if_error: fail
#        files: ./coverage_report.lcov
#        verbose: true
